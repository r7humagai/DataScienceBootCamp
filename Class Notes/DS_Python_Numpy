{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOnoFwuEtyWiWgx9S3nY4FR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/r7humagai/DataScienceBootCamp/blob/main/Class%20Notes/Python_LibraryDS_Numpy.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Python Libraries: Numpy**"
      ],
      "metadata": {
        "id": "h836Vx64sTzO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " *collection of modules that are linked together is also known as a Python library. It has code bundles that can be used again and again in different programs. For programmers, it makes Python programming easier and simpler. Since then, we will not need to compose the same code for various projects.*"
      ],
      "metadata": {
        "id": "cCLP0j8Bnptj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "Nbfcannwsn4W"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.__version__)\n",
        "np.show_config()"
      ],
      "metadata": {
        "id": "eY-cUQSXs5UT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9948ae4f-d8f0-4841-f70c-f6ce1f652d5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.23.5\n",
            "openblas64__info:\n",
            "    libraries = ['openblas64_', 'openblas64_']\n",
            "    library_dirs = ['/usr/local/lib']\n",
            "    language = c\n",
            "    define_macros = [('HAVE_CBLAS', None), ('BLAS_SYMBOL_SUFFIX', '64_'), ('HAVE_BLAS_ILP64', None)]\n",
            "    runtime_library_dirs = ['/usr/local/lib']\n",
            "blas_ilp64_opt_info:\n",
            "    libraries = ['openblas64_', 'openblas64_']\n",
            "    library_dirs = ['/usr/local/lib']\n",
            "    language = c\n",
            "    define_macros = [('HAVE_CBLAS', None), ('BLAS_SYMBOL_SUFFIX', '64_'), ('HAVE_BLAS_ILP64', None)]\n",
            "    runtime_library_dirs = ['/usr/local/lib']\n",
            "openblas64__lapack_info:\n",
            "    libraries = ['openblas64_', 'openblas64_']\n",
            "    library_dirs = ['/usr/local/lib']\n",
            "    language = c\n",
            "    define_macros = [('HAVE_CBLAS', None), ('BLAS_SYMBOL_SUFFIX', '64_'), ('HAVE_BLAS_ILP64', None), ('HAVE_LAPACKE', None)]\n",
            "    runtime_library_dirs = ['/usr/local/lib']\n",
            "lapack_ilp64_opt_info:\n",
            "    libraries = ['openblas64_', 'openblas64_']\n",
            "    library_dirs = ['/usr/local/lib']\n",
            "    language = c\n",
            "    define_macros = [('HAVE_CBLAS', None), ('BLAS_SYMBOL_SUFFIX', '64_'), ('HAVE_BLAS_ILP64', None), ('HAVE_LAPACKE', None)]\n",
            "    runtime_library_dirs = ['/usr/local/lib']\n",
            "Supported SIMD extensions in this NumPy install:\n",
            "    baseline = SSE,SSE2,SSE3\n",
            "    found = SSSE3,SSE41,POPCNT,SSE42,AVX,F16C,FMA3,AVX2\n",
            "    not found = AVX512F,AVX512CD,AVX512_KNL,AVX512_KNM,AVX512_SKX,AVX512_CLX,AVX512_CNL,AVX512_ICL\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "v = np.zeros(10)\n",
        "print(v)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jzA2oYiQs-L8",
        "outputId": "d91bf2f4-b8d6-45a5-9a00-adb21797dac5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a of size 10\n",
        "v = np.zeros(10)\n",
        "v[4] = 1\n",
        "print(v)\n",
        "print(type(v))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2TO5Cy-muBkH",
        "outputId": "8b44845c-ac2b-4970-82a2-74b1b2ac0bba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n",
            "<class 'numpy.ndarray'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "v = np.arange(50)     #. arange -> range\n",
        "print(v)\n",
        "v = v[::-1]\n",
        "print(v)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SAM8AXFPwEhU",
        "outputId": "6829d091-7d83-4b98-914b-807404148f11"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n",
            " 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\n",
            " 48 49]\n",
            "[49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26\n",
            " 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2\n",
            "  1  0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "vector = np.array([1,2,3])\n",
        "print(vector)\n",
        "\n",
        "print(vector[::-1])\n",
        "\n",
        "vector2 = np.arange(20)\n",
        "print(vector2)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YOGgzxHIwKMd",
        "outputId": "1c8dc89b-7c4b-4d1d-94a3-cf54b9493030"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 2 3]\n",
            "[3 2 1]\n",
            "[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2D Array in NUMPY**"
      ],
      "metadata": {
        "id": "jp8XNSNBx9gz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "v = np.arange(9).reshape(3,3)   #. 2D data\n",
        "print(v)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "skVe0jENxk_K",
        "outputId": "cfa52dc7-9a94-4eb7-d4d9-98f97898fe50"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0 1 2]\n",
            " [3 4 5]\n",
            " [6 7 8]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Function: Non-Zero, nonzero()\n",
        "nz = np.nonzero([1,0,0,0,3,0,0,0,3,0,2])\n",
        "print(nz)                                   # Returns indexes of non-zero values"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nQ7KoIhMxfmX",
        "outputId": "f26f339f-ad4c-4c9d-d8d0-937c6146533b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(array([ 0,  4,  8, 10]),)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Identity Matrix\n",
        "\n",
        "v = np.eye(5)\n",
        "print(v)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HKa2Ijmayno3",
        "outputId": "3f7b0c8c-4c09-4fcb-8a15-a6724d486165"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1. 0. 0. 0. 0.]\n",
            " [0. 1. 0. 0. 0.]\n",
            " [0. 0. 1. 0. 0.]\n",
            " [0. 0. 0. 1. 0.]\n",
            " [0. 0. 0. 0. 1.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "v = np.random.random(10)\n",
        "print(v)"
      ],
      "metadata": {
        "id": "YB3g5sSQzJ8E",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7a653df7-4be9-4436-b23d-f2d818467565"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.5904229  0.15101163 0.68765594 0.23613477 0.3505516  0.6190361\n",
            " 0.8190805  0.1090786  0.79662511 0.75114492]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Random Functions in Python*\n",
        "\n",
        "*       *np.random -> NumPuy submodule ro random number generation*\n",
        "*   *random() -> function that generates random numbers from a uniform distribution over the interval[0,1)*\n",
        "*   *(2,2,2) -> single tuple specifying the shape of the desired 3D array. -> create a 3D array with dimensions 2 x 2 x 2*\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "5yg0DP0f0RNd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "v = np.random.random((2,2,2))\n",
        "print(v)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vu2LS_zF0Vn4",
        "outputId": "a03bb61d-e767-4eee-c1fe-cc7b1f5e2265"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[0.69274077 0.01367434]\n",
            "  [0.18496117 0.06531442]]\n",
            "\n",
            " [[0.17077019 0.96547495]\n",
            "  [0.93034467 0.93183443]]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "v = np.random.random((5,5,5)) #. -> 5D array dimension of 5 x 5 x5\n",
        "print(v)"
      ],
      "metadata": {
        "id": "4n-2phr01YrI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ce7e22f7-ad86-42d4-bbb6-35e7650a35d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[3.63778265e-01 1.69229585e-01 7.68244015e-01 6.75939484e-01\n",
            "   5.77123768e-01]\n",
            "  [5.79730100e-01 2.56328885e-01 8.57094360e-01 1.36038851e-01\n",
            "   7.97639131e-01]\n",
            "  [6.22677201e-01 6.53831322e-01 1.40351092e-01 5.40802010e-01\n",
            "   3.92500276e-02]\n",
            "  [8.91798341e-02 5.59331037e-01 1.70459354e-01 6.42353040e-01\n",
            "   3.72952966e-01]\n",
            "  [1.60159719e-01 5.78034371e-01 7.72580109e-01 3.27921959e-01\n",
            "   3.40844067e-01]]\n",
            "\n",
            " [[1.77562073e-01 7.45079387e-01 8.90741785e-01 6.20852923e-01\n",
            "   7.87664222e-01]\n",
            "  [7.71457945e-01 2.16791803e-01 6.93631430e-01 4.25665377e-01\n",
            "   2.87981424e-01]\n",
            "  [1.98735566e-01 7.33835085e-01 5.56716864e-01 8.53158797e-01\n",
            "   9.18249069e-01]\n",
            "  [3.74868087e-01 1.35822266e-01 5.37960168e-01 2.72470453e-01\n",
            "   3.33209958e-01]\n",
            "  [6.30982381e-01 6.99235285e-02 5.66615663e-01 2.31567764e-01\n",
            "   7.10346812e-01]]\n",
            "\n",
            " [[7.71770714e-01 6.31576176e-01 6.31741201e-01 2.09682715e-01\n",
            "   8.98778273e-01]\n",
            "  [4.94444623e-01 2.94655766e-01 5.26893834e-01 9.60176948e-01\n",
            "   8.71494540e-01]\n",
            "  [5.80616142e-01 3.65632788e-01 1.77390401e-01 6.10470564e-01\n",
            "   9.35086087e-01]\n",
            "  [5.71363370e-05 8.62040937e-01 3.25383736e-01 5.58312137e-01\n",
            "   7.88574360e-01]\n",
            "  [1.54284677e-01 3.01366875e-01 5.06766072e-01 3.58172361e-01\n",
            "   2.20735785e-01]]\n",
            "\n",
            " [[1.34142488e-01 8.14927639e-01 3.27499844e-01 6.18362925e-01\n",
            "   1.48055329e-01]\n",
            "  [1.71830498e-01 1.92638148e-01 9.13385487e-01 6.58970630e-01\n",
            "   3.19994205e-01]\n",
            "  [4.49510790e-01 6.86885033e-01 8.38238791e-02 9.53159656e-01\n",
            "   2.40275368e-01]\n",
            "  [3.71113182e-01 4.68107290e-01 6.47517093e-02 4.52871681e-01\n",
            "   2.82161984e-01]\n",
            "  [1.73518992e-01 9.68803172e-01 1.31169337e-02 1.65969006e-01\n",
            "   1.08550418e-02]]\n",
            "\n",
            " [[6.01138744e-01 8.85393590e-01 6.38106027e-01 9.03155911e-01\n",
            "   3.06151701e-01]\n",
            "  [4.32803984e-02 5.77513940e-02 7.45402561e-01 7.00383262e-01\n",
            "   9.31968049e-01]\n",
            "  [8.70431963e-01 8.59075017e-01 3.12333666e-01 5.48325915e-02\n",
            "   4.30106541e-01]\n",
            "  [4.24851963e-02 9.38663864e-01 7.02408296e-01 4.22987050e-01\n",
            "   6.82829780e-01]\n",
            "  [8.89232422e-02 8.22466095e-01 7.46456754e-01 2.11173403e-01\n",
            "   1.22876255e-01]]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#. Funcitons: min and max\n",
        "v = np.random.random((10,10))\n",
        "#print(v)\n",
        "v_max, v_min = v.max(), v.min()\n",
        "print(v_max, v_min)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_AvS8rOx1nxF",
        "outputId": "62781bb5-71c3-4bdb-8580-73767466925c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9890231310625175 0.001795725252203506\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "v = np.random.random(30)\n",
        "v_mean = v.mean()\n",
        "print(v_mean)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DE7k5b5-2Pmv",
        "outputId": "2d51f68f-c06d-4a17-8e6b-5e935169a215"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.4754880535455507\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "v = np.ones((10,10))\n",
        "print(v)\n",
        "v[1:-1, 1:-1] = 0\n",
        "print(v)\n"
      ],
      "metadata": {
        "id": "XVBE8D-d2nhx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "824ba75a-2db3-4791-d2ff-fcedd3384666"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]\n",
            "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n",
            " [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n",
            " [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n",
            " [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n",
            " [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n",
            " [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n",
            " [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n",
            " [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n",
            " [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n",
            " [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a 10 x 10 matrix all with the values of 0 and replace inner values with 1\n",
        "\n",
        "v = np.zeros((10,10))\n",
        "print(\"Before \\n\" , v, \"\\n\")\n",
        "v[1:-1, 1:-1] = 1\n",
        "print(\"After: \\n\", v)"
      ],
      "metadata": {
        "id": "6JosJvOL3Sxa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ca93f3eb-77f6-4c0a-d921-411ac66ef840"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Before \n",
            " [[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]] \n",
            "\n",
            "After: \n",
            " [[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 1. 1. 1. 1. 1. 1. 1. 1. 0.]\n",
            " [0. 1. 1. 1. 1. 1. 1. 1. 1. 0.]\n",
            " [0. 1. 1. 1. 1. 1. 1. 1. 1. 0.]\n",
            " [0. 1. 1. 1. 1. 1. 1. 1. 1. 0.]\n",
            " [0. 1. 1. 1. 1. 1. 1. 1. 1. 0.]\n",
            " [0. 1. 1. 1. 1. 1. 1. 1. 1. 0.]\n",
            " [0. 1. 1. 1. 1. 1. 1. 1. 1. 0.]\n",
            " [0. 1. 1. 1. 1. 1. 1. 1. 1. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "v = np.ones((5,5))\n",
        "print(v)\n",
        "print()\n",
        "v = np.pad(v, pad_width = 1 , mode=\"constant\", constant_values = 9)   # Padding -> Adding extra layer with border\n",
        "print(v)"
      ],
      "metadata": {
        "id": "S78leC143mvg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f3f8791b-0366-4d47-f027-a491df3f0364"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1.]]\n",
            "\n",
            "[[9. 9. 9. 9. 9. 9. 9.]\n",
            " [9. 1. 1. 1. 1. 1. 9.]\n",
            " [9. 1. 1. 1. 1. 1. 9.]\n",
            " [9. 1. 1. 1. 1. 1. 9.]\n",
            " [9. 1. 1. 1. 1. 1. 9.]\n",
            " [9. 1. 1. 1. 1. 1. 9.]\n",
            " [9. 9. 9. 9. 9. 9. 9.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "Notes:\n",
        "'''\n",
        "# nan =/= zero(0)\n",
        "#. Dont compare with 0"
      ],
      "metadata": {
        "id": "9FpKX8MY6kHC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('1.',0 * np.nan)\n",
        "print('2.',np.nan == np.nan)\n",
        "print('3.',np.inf > np.nan)\n",
        "print('4.',np.nan - np.nan)\n",
        "print('5.',0.3 == 3 * 0.1)\n"
      ],
      "metadata": {
        "id": "Uia7SLbE7CuC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4e0e1e04-56d0-4b25-b2e8-9f564db585ea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1. nan\n",
            "2. False\n",
            "3. False\n",
            "4. nan\n",
            "5. False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(0.1 * 3)"
      ],
      "metadata": {
        "id": "8qzGDaoQ8AxT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c55e17f8-cb49-4f42-df3d-31937f86d631"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.30000000000000004\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exploring with nan\n",
        "\n",
        "#nan in arrays\n",
        "\n",
        "v = np.array([1,2,3, np.nan, 5])\n",
        "print(v)\n",
        "isnan = np.isnan(v) # Identifies nan in an array\n"
      ],
      "metadata": {
        "id": "3RRBtcsU8gtD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "693a053e-e145-4062-d874-c1fe835a2f12"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 1.  2.  3. nan  5.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Two arrays with nan in them and adding the arrays\n",
        "\n",
        "v1 = np.array([5,6,np.nan,np.nan,np.nan])\n",
        "v2 = np.array([2,3,10,np.nan,3])\n",
        "\n",
        "v_add = v1+v2\n",
        "print(v_add)\n",
        "# Adding any value to nan will make it nan\n",
        "\n",
        "v_substract = v1-v2\n",
        "print(v_substract)\n",
        "# if one of the values is nan, the output value will be nan\n",
        "\n",
        "v_multiply = v1*v2\n",
        "print(v_multiply)\n",
        "# Multiplication of any number will also result in the result to be nan\n",
        "\n"
      ],
      "metadata": {
        "id": "YKQCOnUJ877K",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "968bf244-d3bd-40b9-8aac-94c8235f9d06"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 7.  9. nan nan nan]\n",
            "[ 3.  3. nan nan nan]\n",
            "[10. 18. nan nan nan]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create a 5 X 5 matrix with values 1,2,3,4 diagonally**"
      ],
      "metadata": {
        "id": "fCfTHFbfX-M9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#. Steps: create a identity matrix with eye()function\n",
        "#.        get a diagonal values array (1,2,3,4,5)\n",
        "#.        multiply the identity matrix with diagonal values\n",
        "\n",
        "id_matrix = np.eye(5,5)\n",
        "diagonal_values = np.array([1,2,3,4,5])\n",
        "output_matrix = id_matrix * diagonal_values\n",
        "\n",
        "print(id_matrix)        #. Identity Matrix\n",
        "print()\n",
        "print(output_matrix)    #. After multiplication"
      ],
      "metadata": {
        "id": "XuMpp5kO9KLY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b2511e77-3877-4600-f826-10e5335b6730"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1. 0. 0. 0. 0.]\n",
            " [0. 1. 0. 0. 0.]\n",
            " [0. 0. 1. 0. 0.]\n",
            " [0. 0. 0. 1. 0.]\n",
            " [0. 0. 0. 0. 1.]]\n",
            "\n",
            "[[1. 0. 0. 0. 0.]\n",
            " [0. 2. 0. 0. 0.]\n",
            " [0. 0. 3. 0. 0.]\n",
            " [0. 0. 0. 4. 0.]\n",
            " [0. 0. 0. 0. 5.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Print 1,2,3,4 just below the diagonal**"
      ],
      "metadata": {
        "id": "zbGOiQxlYDHN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# below the diagonal\n",
        "import numpy as np\n",
        "\n",
        "Z = np.diag(1+np.arange(4), k=-1)\n",
        "print(Z)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aLNtlwiW_rb1",
        "outputId": "c1e01ed5-f5f1-46ca-fd44-e2cbaeb56448"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0 0 0 0 0]\n",
            " [1 0 0 0 0]\n",
            " [0 2 0 0 0]\n",
            " [0 0 3 0 0]\n",
            " [0 0 0 4 0]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#. Checkerboard Pattern Printer\n",
        "\n",
        "Z = np.zeros((8,8), dtype = int)\n",
        "Z[1::2, ::2] = 1  # SECOND ROW: INDEX 1: 1,3,5,7 change to 1, SECOND COLUMN STARTING FROM FIRST COLUMN(INDEX 0). COLUMN 0,2,4,6\n",
        "Z[::2, 1::2] = 1  # Every SECOND ROW STARTING FROM FIRST ROW(INDEX 0), AND EVERY SECOND COLUMN STARTING FROM THE SECOND COLUMN(INDEX 1)\n",
        "print(Z)"
      ],
      "metadata": {
        "id": "CRBsuzlqYgyX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4b16bac6-c95f-4037-d547-98ffea08dbca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0 1 0 1 0 1 0 1]\n",
            " [1 0 1 0 1 0 1 0]\n",
            " [0 1 0 1 0 1 0 1]\n",
            " [1 0 1 0 1 0 1 0]\n",
            " [0 1 0 1 0 1 0 1]\n",
            " [1 0 1 0 1 0 1 0]\n",
            " [0 1 0 1 0 1 0 1]\n",
            " [1 0 1 0 1 0 1 0]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#. Consider a (6,7,8) shape array, what is the x,y,z of the 100th element?\n",
        "#. function: unravel()\n",
        "#. np.unravel_index() : convert a flat index into a tuple of indices in a multi-dimensional array.\n",
        "#. This program: i. find the tuple of indices that corresponds to the flat index 100 in a 3-D array with dimensions(6,7,8).\n",
        "\n",
        "print(np.unravel_index(100,(6,7,8)))\n",
        "\n",
        "# This means that in a 3D array with dimensions(6,7,8) the element at flat index 100 is located at position(1,5,4) when you consider each dimensions separatly."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MMeYHUwhanEy",
        "outputId": "9e9f0dae-a3fd-46bf-ff4f-9d8d108695ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1, 5, 4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Class Assignment\n",
        "# Create a checkerboard 8 x 8 matrix using the tile function.\n",
        "\n",
        "# Single 2 x 2 checkerboard\n",
        "ck_board = np.array([[0,1], [1,0]])\n",
        "print(ck_board)\n",
        "\n",
        "# Using tile function in numpy to create a 8 x 8 checkerboard matrix\n",
        "ck_board = np.tile(ck_board, (4,4))\n",
        "print(ck_board)"
      ],
      "metadata": {
        "id": "j_i4PCoCc9K0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "da18aad0-5ec4-4cda-fd8a-5f1e52746f83"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0 1]\n",
            " [1 0]]\n",
            "[[0 1 0 1 0 1 0 1]\n",
            " [1 0 1 0 1 0 1 0]\n",
            " [0 1 0 1 0 1 0 1]\n",
            " [1 0 1 0 1 0 1 0]\n",
            " [0 1 0 1 0 1 0 1]\n",
            " [1 0 1 0 1 0 1 0]\n",
            " [0 1 0 1 0 1 0 1]\n",
            " [1 0 1 0 1 0 1 0]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Tuesday 8/29"
      ],
      "metadata": {
        "id": "iyuu7gsGD-kN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "lst1 = [11,22,33,44,55,66,77,88,99,110]\n",
        "arr1 = np.array(lst1)     # Converting a list to an array\n",
        "print(type(arr1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IPL5zsdhEBK6",
        "outputId": "41c86d0c-d1b4-46ba-ae02-ce7a7980a132"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'numpy.ndarray'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tup1 = (12,23,34,45,56,67,78,89,90)\n",
        "arr2 = np.array(tup1)     # Converting a tuple to an array\n",
        "print(type(arr2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X1CK9eaQEVnd",
        "outputId": "352a9733-e69d-4285-a196-c6d380740eee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'numpy.ndarray'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "set1 = {1,2,3,4,5,6,6,7, True, False, 'Python','Programming'}\n",
        "arr3 = np.array(set1)\n",
        "arr3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kht-lmujEiuq",
        "outputId": "e8c880f3-4f3f-44ea-ca2c-58cdbee91146"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array({False, 1, 2, 3, 4, 5, 6, 7, 'Programming', 'Python'}, dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dict1 = {'a':[1,2,3,4,5,0],'b':(True, False),'c': 'Python','d': 'Programming'}\n",
        "arr3 = np.array(set1)\n",
        "arr3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tHfa-57OExBv",
        "outputId": "1aed1732-2625-4e3a-8ebc-a7ad306e6f25"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array({False, 1, 2, 3, 4, 5, 6, 7, 'Programming', 'Python'}, dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str1 = \"Python Programming\"\n",
        "arr5 = np.array(str1)\n",
        "print(arr5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wNhGL5XtFHqK",
        "outputId": "818bb2ad-38ac-4053-d82a-12002b567e3b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Python Programming\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Class Assignment**"
      ],
      "metadata": {
        "id": "eDGAEts_FkgS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr1d = np.array([1,2,3,4,5,6,7,8,9,10])  # 1D Array\n",
        "print(arr1d)\n",
        "arr1d.ndim          # To Check the dimension of the numpy array"
      ],
      "metadata": {
        "id": "qf8R9ex9HJl-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "081b6106-e8a1-45e8-c233-d2fc6ef13668"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 1  2  3  4  5  6  7  8  9 10]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr2d = np.array([[1,2,3,4,5],[9,8,7,6,5]])   # 2D Array\n",
        "print(arr2d)\n",
        "arr2d.ndim          # -> should be 2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QpTSxbcLHexK",
        "outputId": "eed3f381-f314-4530-d259-db1152124ca5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2 3 4 5]\n",
            " [9 8 7 6 5]]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr3d = np.array([[[1,2,3],[2,3,4]],[[3,4,5],[4,5,6]]])     # 3D Array\n",
        "print(arr3d)\n",
        "arr3d.ndim"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bTt4FdlhH1M_",
        "outputId": "908cf65e-31b4-4233-f3a3-71e730cece11"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[1 2 3]\n",
            "  [2 3 4]]\n",
            "\n",
            " [[3 4 5]\n",
            "  [4 5 6]]]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = np.array(42)\n",
        "b = np.array([1, 2, 3, 4, 5])\n",
        "c = np.array([[1, 2, 3], [4, 5, 6]])\n",
        "d = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\n",
        "e = np.array([\n",
        "    [[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]],\n",
        "    [[[11, 12, 13], [14, 15, 16]], [[11, 12, 13], [14, 15, 16]]]\n",
        "    ])\n",
        "\n",
        "print(a.ndim)       # 0D\n",
        "print(b.ndim)       # 1D\n",
        "print(c.ndim)       # 2D\n",
        "print(d.ndim)       # 3D\n",
        "print(e.ndim)       # 4D"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kl110hbTIk_k",
        "outputId": "6442b9bb-100a-4421-8263-6360e4825efa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "----\n",
        "**Numpy Practice Session from freeCodeCamp**\n",
        "\n",
        "----"
      ],
      "metadata": {
        "id": "JYm5zdk1R7qB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Numpy Introduction**\n",
        "\n",
        "List vs Numpy:\n",
        "\n",
        "Why is Numpy faster than list?\n",
        "\n",
        "\n",
        "*   Numpy array is a collection of similar data-types that are densely packed in memory. A Python list can have different data-types, which puts lots of extra constraints while doing computation on it.\n",
        "*   Numpy is able to divide a task into multiple subtasks and process them parallelly.\n",
        "*   Numpy functions are implemented in C. Which again makes it faster compared to Python Lists.\n",
        "\n",
        "------"
      ],
      "metadata": {
        "id": "dPScmcu7m1ZY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Numpy Features:**\n",
        "\n",
        "\n",
        "*   SIMD Vector Processing : Single Instruction Multiple Data\n",
        "    \n",
        "    -> SIMD architecrture executes the same instrucrtion on multiple data sets simultaneously. This means that all processors in a SIMD system perform the same operation on different pieces of data.\n",
        "*   Effective Cache Utilization\n",
        "\n",
        "-----"
      ],
      "metadata": {
        "id": "6PzTFe-HsmV6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Applications of NumPy**\n",
        "\n",
        "\n",
        "*     Mathematics(MATLAB replacement)\n",
        "*     Plotting(Matplotlib)\n",
        "*     Backend(Pandas, Connect4, Digital Photography)\n",
        "*     Machine Learning\n",
        "----"
      ],
      "metadata": {
        "id": "P6ErgD0Ltp08"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Load in Numpy**\n",
        "\n",
        "--------"
      ],
      "metadata": {
        "id": "eM2NYxUQuWUJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "1li5AOSdujWg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*The Basics*"
      ],
      "metadata": {
        "id": "ZP_T62h3u-AQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = np.array([1,2,3])\n",
        "a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LBRprQSEvGeL",
        "outputId": "80c3fcf1-2c2f-4047-c577-6c554bc3202c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 2, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "b = np.array([[9.0, 8.0, 7.9],[5.2, 6.7,3.2]])    # 2-Dimensional List\n",
        "b"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wP1tojZqvMgu",
        "outputId": "94fdb3b8-aa09-4944-9d30-1e007fed1a37"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[9. , 8. , 7.9],\n",
              "       [5.2, 6.7, 3.2]])"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get Dimension\n",
        "a.ndim      # gives out the dimension eg. 1D, 2D"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xV76-KPgvnvc",
        "outputId": "05030286-54d9-4adf-d794-6030840ac1d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "b.ndim      # -> 2D"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NNq-oLgfvxvE",
        "outputId": "e1144d3d-9d80-4548-bbfe-92a7bbca6d47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(a.shape)     # To see how many rows and columns are there\n",
        "print(b.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kJJAgKMcv2IC",
        "outputId": "24f00a9a-b676-4b4b-96a8-9a5e096ef8e4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(3,)\n",
            "(2, 3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get datatypes of array\n",
        "print(a.dtype)   # int\n",
        "print(b.dtype)   # float\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gbYuQiFLwANe",
        "outputId": "d5dd764b-2acd-424a-f41c-c18afe6196bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "int64\n",
            "float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "c = np.array(['Roshan', 'Data' , 'Scientist'])      # String data in numpy array\n",
        "print(c)\n",
        "print(c.dtype)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DpZ0T97mwScl",
        "outputId": "8c2d3191-06b1-4faf-b485-3eb97792a9cc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Roshan' 'Data' 'Scientist']\n",
            "<U9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Specify data type during initialization\n",
        "\n",
        "a = np.array([1,2,3], dtype = 'int16')\n",
        "a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q3DDH4Vkwkki",
        "outputId": "81449d40-eb58-47fb-d9ca-82e363105659"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 2, 3], dtype=int16)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "        int16 vs int64.  -> Memory Efficiency:\n",
        "        int 16 uses 2 bytes(16 bits) of memory per element, while int64 uses 8 bytes(64) of memory per element\n"
      ],
      "metadata": {
        "id": "6GXs7EJvxGDD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get size\n",
        "\n",
        "print(a.itemsize)       # Since array a has data type int16, and int16 uses 2 bytes of memory per element, the itemsize should be 2\n",
        "print(b.itemsize)       # Since array b contains float elements and floats are bigger than int\n",
        "print(b.dtype)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "62GE8ZNfxpB-",
        "outputId": "badb1395-428b-404a-d83e-0d8dc46eeceb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "8\n",
            "float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get total size\n",
        "a.nbytes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vmFS7OgAyk8Z",
        "outputId": "dd61676a-136f-487d-dcfb-236390ad23b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "        Note: Specify datatypes while initializing array to be more efficient\n",
        "        eg. a = np.array([1,2,3], dtype = 'int16')"
      ],
      "metadata": {
        "id": "srApd3j1zlzf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Accessing/Changing specific elements, row, columns, etc**"
      ],
      "metadata": {
        "id": "_DOX4_Afz3l1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = np.array([[1,2,3,4,5,6,7],[8,9,10,11,12,13,14]])      # 2 X 7 array\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SjQN06yc0AWD",
        "outputId": "504f0a29-8401-4ad1-ede1-596e5cf6199a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 1  2  3  4  5  6  7]\n",
            " [ 8  9 10 11 12 13 14]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the shape (2,7)\n",
        "a.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-xYHQAlr0AcP",
        "outputId": "2685e792-08f0-40ce-f8c9-5877f7fbc637"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2, 7)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the specific element [r,c] -> Indexing starts at 0\n",
        "print(a[1, 5])\n",
        "print(a[1, -4])     # Also works, negative notation"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HUmXpDtf0Aec",
        "outputId": "198eb064-2ba9-4108-cc5b-1f4955191945"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "13\n",
            "11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get a specific row\n",
        "print(a[0])       # First row\n",
        "\n",
        "# Get a specific column\n",
        "print(a[:,2])     # print all the rows, index 2 colmns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zvc8PWFX0Agh",
        "outputId": "15b6c931-f5aa-4038-ed42-74835fb485dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 2 3 4 5 6 7]\n",
            "[ 3 10]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Other indexing\n",
        "\n",
        "a[0, 6:1:-2]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p4LDwNWq0Aik",
        "outputId": "97ea40f6-da16-46f7-b4e4-a5f6a7c1a854"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([7, 5, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Changing the value inside the array\n",
        "# Change '12' to 24\n",
        "print(a)\n",
        "a[1, 4] = 24\n",
        "\n",
        "print()\n",
        "\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "68Z7X_gD0AtM",
        "outputId": "6aebfa0d-578d-403d-9e2d-7991e19d50cd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 1  2  3  4  5  6  7]\n",
            " [ 8  9 10 11 12 13 14]]\n",
            "\n",
            "[[ 1  2  3  4  5  6  7]\n",
            " [ 8  9 10 11 24 13 14]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Task: Change it back to 12 using negative indexing\n",
        "a[-1, -3] = 12\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D0iGt_wN2X0N",
        "outputId": "92971a36-047e-48a6-a2a7-369178241c1a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 1  2  3  4  5  6  7]\n",
            " [ 8  9 10 11 12 13 14]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**3D Examples**"
      ],
      "metadata": {
        "id": "9qgEuIwr3PNz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "b = np.array([[[1,2],[3,4]], [[5,6], [7,8]]])\n",
        "print(b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WqIX-9Tg3RS9",
        "outputId": "b40af8ef-f04c-493d-a5a0-12f9cc8585c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[1 2]\n",
            "  [3 4]]\n",
            "\n",
            " [[5 6]\n",
            "  [7 8]]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get specific elements for 3D arrays(Method: Work outside in)\n",
        "\n",
        "print(b[0,1,0])       # -> 3\n",
        "print(b[1, 0, 1])     # -> 6"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xVF5Gfvk3rBb",
        "outputId": "031547fe-123e-4c69-d894-ae86c4aec377"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n",
            "6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Replacement using index\n",
        "\n",
        "print(b)\n",
        "print(\"\\nAfter replacement: \")\n",
        "b[:,1,:] = ([9,10],[11,12])\n",
        "\n",
        "print(b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iNBEYfvd5BbP",
        "outputId": "e0b08a0d-8542-4efb-8428-b0506b3afaa2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[1 2]\n",
            "  [3 4]]\n",
            "\n",
            " [[5 6]\n",
            "  [7 8]]]\n",
            "\n",
            "After replacement: \n",
            "[[[ 1  2]\n",
            "  [ 9 10]]\n",
            "\n",
            " [[ 5  6]\n",
            "  [11 12]]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "----\n",
        "\n",
        "**Initializing Different Types of Array**\n",
        "\n",
        "----"
      ],
      "metadata": {
        "id": "YG22kwU35dik"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# All 0s Matrix\n",
        "\n",
        "np.zeros(2)         # np.zeros((rows))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GvdJqRTW6Sm1",
        "outputId": "b8ab1a4f-adcb-432f-cd47-f10239f52b4b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0., 0.])"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# All 1s Matrix\n",
        "\n",
        "np.ones((2,3))        # np.ones((rows, columns))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9KAvGz9963iM",
        "outputId": "b05b39e5-62da-4e3f-ea88-7b20b4d4963e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1., 1., 1.],\n",
              "       [1., 1., 1.]])"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Any other number\n",
        "print(np.full((2,2), 99))      # np.full((rows, columns) , specific_number)\n",
        "\n",
        "# Specifying the datatypes\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mAxmNPm-7n9t",
        "outputId": "35e40122-00ec-460b-d15d-fa5e92463a0e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[99 99]\n",
            " [99 99]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = np.ones((4,2,6), dtype = 'int64')     # Specifying the data type\n",
        "print(a)\n",
        "print(a.dtype)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mGJ8GAmj9JeN",
        "outputId": "31af1d34-b351-4758-9094-cb00a4303202"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[1 1 1 1 1 1]\n",
            "  [1 1 1 1 1 1]]\n",
            "\n",
            " [[1 1 1 1 1 1]\n",
            "  [1 1 1 1 1 1]]\n",
            "\n",
            " [[1 1 1 1 1 1]\n",
            "  [1 1 1 1 1 1]]\n",
            "\n",
            " [[1 1 1 1 1 1]\n",
            "  [1 1 1 1 1 1]]]\n",
            "int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.full((2,3,4),12, dtype = 'int32')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "libBi1U7KIjF",
        "outputId": "33dc003c-7589-48cb-8a18-0b0dfa0bcefa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[12, 12, 12, 12],\n",
              "        [12, 12, 12, 12],\n",
              "        [12, 12, 12, 12]],\n",
              "\n",
              "       [[12, 12, 12, 12],\n",
              "        [12, 12, 12, 12],\n",
              "        [12, 12, 12, 12]]], dtype=int32)"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Any other number using full_like\n",
        "print(a.shape)\n",
        "print()\n",
        "print(np.full_like(a, 4))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1H3l5HlPKeVR",
        "outputId": "d986f94c-885b-4d4e-b75b-673e2348df83"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(4, 2, 6)\n",
            "\n",
            "[[[4 4 4 4 4 4]\n",
            "  [4 4 4 4 4 4]]\n",
            "\n",
            " [[4 4 4 4 4 4]\n",
            "  [4 4 4 4 4 4]]\n",
            "\n",
            " [[4 4 4 4 4 4]\n",
            "  [4 4 4 4 4 4]]\n",
            "\n",
            " [[4 4 4 4 4 4]\n",
            "  [4 4 4 4 4 4]]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#"
      ],
      "metadata": {
        "id": "F5zQJgVlMcU-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Random decimal numbers\n",
        "np.random.randint(-1,6, size = (3,3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MZdvwre9LUdZ",
        "outputId": "5960c884-3905-4b73-998d-b7b7b07e6122"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[2, 3, 1],\n",
              "       [0, 1, 1],\n",
              "       [0, 4, 1]])"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Random Integer Values\n",
        "np.random.randint(7, size = (3,3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_C6ndS_LLTyc",
        "outputId": "0927fd58-605d-47b6-96cf-f0e3b3f52471"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[5, 2, 3],\n",
              "       [5, 0, 2],\n",
              "       [0, 5, 6]])"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating a identity Matrix\n",
        "np.identity(5)\n",
        "\n",
        "np.identity(5, dtype = 'int32')     # Specifying the datatype\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mGVpeFT7NGx_",
        "outputId": "65c4af7d-626b-4ab5-8f83-b5e73a7e7707"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1, 0, 0, 0, 0],\n",
              "       [0, 1, 0, 0, 0],\n",
              "       [0, 0, 1, 0, 0],\n",
              "       [0, 0, 0, 1, 0],\n",
              "       [0, 0, 0, 0, 1]], dtype=int32)"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.identity(3)      # identity matrix of 3 rows and 3 columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "maBXTV5OB_05",
        "outputId": "2a10a0e3-86d2-4a2c-a89b-ae0a89dbb76b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1., 0., 0.],\n",
              "       [0., 1., 0.],\n",
              "       [0., 0., 1.]])"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Repeat an array using axis = 0 -> rows\n",
        "arr_2d = np.array([[1,2,3]])\n",
        "print(arr_2d)\n",
        "# repeat three times\n",
        "r1 = np.repeat(arr_2d,3, axis = 0) # axis = 0 -> rows\n",
        "print(r1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YtvrB9C9CKh5",
        "outputId": "9a50a918-3cc6-4781-a958-bf1eabf4fcbf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2 3]]\n",
            "[[1 2 3]\n",
            " [1 2 3]\n",
            " [1 2 3]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Repeat an array using axis=1, using columns\n",
        "arr_2d = np.array([[1,2,3,4,5]])\n",
        "print(arr_2d)\n",
        "# repeat three times\n",
        "r1 = np.repeat(arr_2d,3, axis = 0) # axis = 1 -> columns\n",
        "print(r1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pahx1R-sCuCz",
        "outputId": "4edf8292-e510-473a-8fbc-b0406fe8ab9d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2 3 4 5]]\n",
            "[[1 2 3 4 5]\n",
            " [1 2 3 4 5]\n",
            " [1 2 3 4 5]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "        In order for matrix multiplication to be defined,\n",
        "        the number of columns in the first matrix\n",
        "        must be equal to\n",
        "        the number of rows in the second matrix.\n"
      ],
      "metadata": {
        "id": "R_yGhKttFPvH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "          Matrix Multiplication in Python\n",
        "          res = np.dot(mat1,mat2)"
      ],
      "metadata": {
        "id": "Ajl-lFNfF1sa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Practice question\n",
        "# Create a matrix with 1 in the border and 0 everywhere else, except the mid-value will be 9\n",
        "'''\n",
        "Approach:\n",
        "1. Make a matrix1 size 5 X 5 with all 1s\n",
        "2. Make a matrix2 size 3 X 3 with all 0s\n",
        "3. Change the value of matrix2[1][1] = 9\n",
        "3. replace the inner value of first matrix1 with second matrix using slicing\n",
        "'''\n",
        "\n",
        "matrix1 = np.ones((5,5))\n",
        "matrix2 = np.zeros((3,3))\n",
        "matrix3 = np.full(1, 9)\n",
        "\n",
        "print(matrix1)\n",
        "print(matrix2)\n",
        "print(matrix3)\n",
        "matrix2[1,1] = matrix3\n",
        "print(matrix2)\n",
        "matrix1[1:4,1:4] = matrix2\n",
        "print(\"Final:\\n\",matrix1)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bddqh50MDFtn",
        "outputId": "d23c4b44-1f38-434b-8711-c63f634f6f1e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1.]]\n",
            "[[0. 0. 0.]\n",
            " [0. 0. 0.]\n",
            " [0. 0. 0.]]\n",
            "[9]\n",
            "[[0. 0. 0.]\n",
            " [0. 9. 0.]\n",
            " [0. 0. 0.]]\n",
            "Final:\n",
            " [[1. 1. 1. 1. 1.]\n",
            " [1. 0. 0. 0. 1.]\n",
            " [1. 0. 9. 0. 1.]\n",
            " [1. 0. 0. 0. 1.]\n",
            " [1. 1. 1. 1. 1.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "        Be careful when copying arrays!!!\n",
        "      "
      ],
      "metadata": {
        "id": "Ejzs8NckHYCG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Copying arrays\n",
        "a = np.array([1,2,3])\n",
        "b = a.copy()\n",
        "b[0] = 100\n",
        "\n",
        "print(b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1ZmfoeDSHdi8",
        "outputId": "0f7e6d15-571c-48b9-deb7-4cd783fc7e29"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[100   2   3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Mathematics Opearations in Numpy**"
      ],
      "metadata": {
        "id": "VWmgwKZrIc-8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = np.array([1,2,3,4])\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nvUCk3fZIfnM",
        "outputId": "f21b3ea8-320d-4245-f542-c97ab759297e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 2 3 4]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Direcly Manipulate the elements of array using Mathematical functions\n",
        "\n",
        "print(a + 2)\n",
        "print(a - 2)\n",
        "print(a * 2)\n",
        "print(a / 2)\n",
        "print(a ** 2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wVQFIgrUIiTz",
        "outputId": "c1dc4689-1eb8-4ec7-8fec-b3203396b4b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[3 4 5 6]\n",
            "[-1  0  1  2]\n",
            "[2 4 6 8]\n",
            "[0.5 1.  1.5 2. ]\n",
            "[ 1  4  9 16]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = np.array([1,2,3,4])\n",
        "b = np.array([1,0,1,0])\n",
        "a + b\n",
        "print(a+b)      # Two arrays can be summed up\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2KpFEfQRIiWy",
        "outputId": "51f6e12c-7644-4223-abb5-65391cefbc77"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2 2 4 4]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Take trigonometric functions:\n",
        "a = [0,30,45,60,90]\n",
        "np.cos(a)\n",
        "np.sin(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vEYX4Xgn0oes",
        "outputId": "678dea3c-b70f-4878-e577-a0d663a92465"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0.        , -0.98803162,  0.85090352, -0.30481062,  0.89399666])"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Math Routine Docs: https://numpy.org/doc/stable/reference/routines.math.html\n",
        "\n",
        "----"
      ],
      "metadata": {
        "id": "2i5c6VnaIiZE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Linear Algebra**"
      ],
      "metadata": {
        "id": "CvlLgEmpIibi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = np.full((2,3), 1)\n",
        "print(a)\n",
        "print()\n",
        "b = np.full((3,2), 2)\n",
        "print(b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5bYKggDQIid1",
        "outputId": "7e63eef9-0896-413a-ce29-eece60885fab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 1 1]\n",
            " [1 1 1]]\n",
            "\n",
            "[[2 2]\n",
            " [2 2]\n",
            " [2 2]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Matrix Multiplication\n",
        "np.matmul(a,b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lDcwZOKlIigY",
        "outputId": "8767d106-8717-415a-d087-034ece5cb2d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[6, 6],\n",
              "       [6, 6]])"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Determinant of a matrix\n",
        "c = np.identity(3)\n",
        "np.linalg.det(c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jdXmRlCb3FXI",
        "outputId": "1e2515f4-9a21-43ab-f704-1f9c12609986"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Other Linear Algebra resources:\n",
        "https://numpy.org/doc/stable/reference/routines.linalg.html\n",
        "\n",
        "----"
      ],
      "metadata": {
        "id": "VHs4uEPPIiid"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Statistics**"
      ],
      "metadata": {
        "id": "qOBIfpdSIik3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "stats = np.array([[7,2,3],[4,5,6]])\n",
        "stats"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kkQhu6JaIinj",
        "outputId": "5bdd010c-ba06-4562-f005-91a3fd00552b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[7, 2, 3],\n",
              "       [4, 5, 6]])"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Take the min\n",
        "print(np.min(stats))\n",
        "print(np.min(stats, axis = 0))      # minimum of each column\n",
        "print(np.min(stats, axis = 1))      # minimum of each row\n"
      ],
      "metadata": {
        "id": "YdMYNIHLIiqj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ba2f7824-fe81-4a75-813f-e0ef315dc5c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "[4 2 3]\n",
            "[2 4]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Take the max\n",
        "print(np.max(stats))\n",
        "print(np.max(stats, axis = 0))      # maxiumum of each column\n",
        "print(np.max(stats, axis = 1))      # maximum of each row"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W7VFOufG3yO4",
        "outputId": "cb0fa396-8ee4-4201-da32-a5b7985270bf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7\n",
            "[7 5 6]\n",
            "[7 6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Take the mean\n",
        "print(np.mean(stats))\n",
        "print(np.mean(stats, axis = 0))     # Mean of each column\n",
        "print(np.mean(stats, axis = 1))     # Mean of each row"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4ad4XdoV323v",
        "outputId": "2f165c85-b10e-4fb8-cf9c-7552fe76454a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4.5\n",
            "[5.5 3.5 4.5]\n",
            "[4. 5.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Reorganizing Arrays**\n"
      ],
      "metadata": {
        "id": "-jE3opq6iNCt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Reshaping Arrays\n",
        "# Requirements: before and after arrays should have the same amount of values\n",
        "\n",
        "before = np.array([[1,2,3,4],[5,6,7,8]])\n",
        "print(before)\n",
        "\n",
        "after = before.reshape((4,2))\n",
        "print(after)\n",
        "print()\n",
        "after = before.reshape((2,2,2))\n",
        "print(after)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bAavlJTFiPcN",
        "outputId": "4bf101fc-b047-4f46-c5f9-69139908ac07"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2 3 4]\n",
            " [5 6 7 8]]\n",
            "[[1 2]\n",
            " [3 4]\n",
            " [5 6]\n",
            " [7 8]]\n",
            "\n",
            "[[[1 2]\n",
            "  [3 4]]\n",
            "\n",
            " [[5 6]\n",
            "  [7 8]]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Vertical Stacks: vertifcally stacking matrices or vectors\n",
        "# Important: Dimensions\n",
        "\n",
        "v1 = np.array([1,2,3,4])\n",
        "v2 = np.array([5,6,7,8])\n",
        "\n",
        "vstack_result = np.vstack([v1,v2, v2,v1])\n",
        "print(vstack_result)\n",
        "print(type(vstack_result))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LdcJm25NkkZ9",
        "outputId": "e4f2200d-d033-4c6d-db67-6684a2da27b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2 3 4]\n",
            " [5 6 7 8]\n",
            " [5 6 7 8]\n",
            " [1 2 3 4]]\n",
            "<class 'numpy.ndarray'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Horizantal Stack\n",
        "\n",
        "h1 = np.array([1,2,3,4])\n",
        "h2 = np.array([5,6,7,8])\n",
        "\n",
        "horizantal_stack = np.hstack([v2, v1, v1, v2])\n",
        "print(horizantal_stack)\n",
        "print(type(horizantal_stack))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3CoUWYyGlAW9",
        "outputId": "f01f8aa1-103e-4e6f-e824-8d3e95c4c704"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5 6 7 8 1 2 3 4 1 2 3 4 5 6 7 8]\n",
            "<class 'numpy.ndarray'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Miscellaneous**\n",
        "\n",
        "-----"
      ],
      "metadata": {
        "id": "xUsBrQrHlBd1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Load Data from File**"
      ],
      "metadata": {
        "id": "vQJmv_YDlg_A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Case: Loading data from file using numpy(not using panda dframe)\n"
      ],
      "metadata": {
        "id": "Iwi2t_XClk7J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "filedata = np.genfromtxt('data.txt', delimiter = ',')\n",
        "\n",
        "print(filedata)\n",
        "print(type(filedata))     # Print data type of the whole text\n",
        "print(filedata.dtype)     # Print data type of data inside\n"
      ],
      "metadata": {
        "id": "2s8kL5CKl3XI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "13b5856d-9fea-43cb-f344-4556e82723e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[  1.  13.  21.  11. 196.  75.   4.   3.  34.   6.   7.   8.   0.   1.\n",
            "    2.   3.   4.   5.]\n",
            " [  3.  42.  12.  33. 766.  75.   4.  55.   6.   4.   3.   4.   5.   6.\n",
            "    7.   0.  11.  12.]\n",
            " [  1.  22.  33.  11. 999.  11.   2.   1.  78.   0.   1.   2.   9.   8.\n",
            "    7.   1.  76.  88.]]\n",
            "<class 'numpy.ndarray'>\n",
            "float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Change the data type to int32\n",
        "filedata = filedata.astype('int32')\n",
        "print(filedata)\n",
        "\n",
        "print(type(filedata))     # Print data type of the whole text\n",
        "print(filedata.dtype)     # Print data type of data inside"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S0kBeiivwgRi",
        "outputId": "42c662ae-ca4b-40f2-8fba-403778c26f00"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[  1  13  21  11 196  75   4   3  34   6   7   8   0   1   2   3   4   5]\n",
            " [  3  42  12  33 766  75   4  55   6   4   3   4   5   6   7   0  11  12]\n",
            " [  1  22  33  11 999  11   2   1  78   0   1   2   9   8   7   1  76  88]]\n",
            "<class 'numpy.ndarray'>\n",
            "int32\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Boolean Masking & Advanced Indexing**"
      ],
      "metadata": {
        "id": "VgnVv5UhxcV3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "filedata > 50     # Checks boolean data for specific location"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BDg4bwpexezn",
        "outputId": "92458590-ea09-4645-bb93-a7d643ce457e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[False, False, False, False,  True,  True, False, False, False,\n",
              "        False, False, False, False, False, False, False, False, False],\n",
              "       [False, False, False, False,  True,  True, False,  True, False,\n",
              "        False, False, False, False, False, False, False, False, False],\n",
              "       [False, False, False, False,  True, False, False, False,  True,\n",
              "        False, False, False, False, False, False, False,  True,  True]])"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "filedata[filedata > 50]     # Only grab the values that satisfy the boolean conditions"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sP89YzLAxut3",
        "outputId": "f2510792-c74b-43e7-e83e-68432fe5c3e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([196,  75, 766,  75,  55, 999,  78,  76,  88], dtype=int32)"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Indexing with a List in Numpy\n",
        "a = np.array([1,2,3,4,5,6,7,8,9])\n",
        "z = (a[[1,2,8]])\n",
        "print(z)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nxNhLCz1x4Dw",
        "outputId": "69b07db4-3137-428e-cbb9-13e467736fc6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2 3 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "           numpy.any() function is used to check\n",
        "           if any element in a given array evaluates to True\n",
        "           along a specified axis or in the entire array.\n",
        "\n",
        "           numpy.any(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)\n"
      ],
      "metadata": {
        "id": "kh_LkYrb1y_b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "filedata = np.genfromtxt('data.txt', delimiter = ',')\n",
        "filedata = filedata.astype('int32')\n",
        "\n",
        "print(filedata)\n",
        "\n",
        "print()\n",
        "np.any(filedata > 50, axis = 0)   # Along the column\n",
        "print()\n",
        "np.any(filedata > 50, axis = 1)   # Along the rows"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jwbZudIkyXQC",
        "outputId": "c593afdd-fb9d-4e60-ccfc-383cf10ab9ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[  1  13  21  11 196  75   4   3  34   6   7   8   0   1   2   3   4   5]\n",
            " [  3  42  12  33 766  75   4  55   6   4   3   4   5   6   7   0  11  12]\n",
            " [  1  22  33  11 999  11   2   1  78   0   1   2   9   8   7   1  76  88]]\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ True,  True,  True])"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Compare with numpy.all -> only return True if ALL elements satisfy the condition, here > 50\n",
        "\n",
        "np.all(filedata > 50, axis = 0)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r6fKpnf64Iz4",
        "outputId": "fbc9094c-0fd6-4289-ff1c-ad1e2963b83d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([False, False, False, False,  True, False, False, False, False,\n",
              "       False, False, False, False, False, False, False, False, False])"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "((filedata > 50) & (filedata < 100))        # Double Condition"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d5_V8x5o87NB",
        "outputId": "8e0532c1-e27b-48a8-b7a9-d0f6343aa715"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[False, False, False, False, False,  True, False, False, False,\n",
              "        False, False, False, False, False, False, False, False, False],\n",
              "       [False, False, False, False, False,  True, False,  True, False,\n",
              "        False, False, False, False, False, False, False, False, False],\n",
              "       [False, False, False, False, False, False, False, False,  True,\n",
              "        False, False, False, False, False, False, False,  True,  True]])"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(~(filedata > 50) & (filedata < 100))     # '~' Reverse"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zNrySjE49ZK_",
        "outputId": "df9bdd4d-37d7-43a2-a2a1-0f4772ee2405"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ True,  True,  True,  True, False, False,  True,  True,  True,\n",
              "         True,  True,  True,  True,  True,  True,  True,  True,  True],\n",
              "       [ True,  True,  True,  True, False, False,  True, False,  True,\n",
              "         True,  True,  True,  True,  True,  True,  True,  True,  True],\n",
              "       [ True,  True,  True,  True, False,  True,  True,  True, False,\n",
              "         True,  True,  True,  True,  True,  True,  True, False, False]])"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Practice Questions**"
      ],
      "metadata": {
        "id": "Lk8bvQ2Q9fAP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Import the numpy package under the name np\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "utXAFibr9oom"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 2. Print the numpy version and the configuration\n",
        "print(np.__version__)   # version\n",
        "print(np.show_config()) # configuration"
      ],
      "metadata": {
        "id": "Jv2-teCOLhQx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 3. create a null vector of size 10\n",
        "vector1 = np.zeros(10)\n",
        "print(vector1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hyBy3cL8MOKh",
        "outputId": "0bc449d0-fa07-4934-b70f-e1598cc693d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#4. How to find the memory size of any array\n",
        "vector1.nbytes    # bytes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EGfmCnqaM0HB",
        "outputId": "99e7baea-5b6a-490d-a94c-794c855e5410"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "80"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#. Compute the min/max for each row for a Numpy 2D array\n",
        "\n",
        "# Generating the array\n",
        "np.random.seed(100)\n",
        "a = np.random.randint(1,10, [5,3])\n",
        "print(a)\n",
        "\n",
        "# Computing max/min for each row\n",
        "\n",
        "np.apply_along_axis(lambda x: np.min(x)/np.max(x), arr = a, axis = 1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kxN0SjFmNeh5",
        "outputId": "b552ebdc-8855-4270-d32b-4b45f8f18a16"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[9 9 4]\n",
            " [8 8 1]\n",
            " [5 3 6]\n",
            " [3 3 3]\n",
            " [2 1 9]]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.44444444, 0.125     , 0.5       , 1.        , 0.11111111])"
            ]
          },
          "metadata": {},
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.apply_along_axis(lambda row: print(row), arr=a , axis= 1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9tJSx0WfPT2f",
        "outputId": "3211dec6-1d6a-4e11-9888-d89488ad410d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[9 9 4]\n",
            "[8 8 1]\n",
            "[5 3 6]\n",
            "[3 3 3]\n",
            "[2 1 9]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([None, None, None, None, None], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    }
  ]
}
